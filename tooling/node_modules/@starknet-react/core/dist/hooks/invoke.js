"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStarknetInvoke = void 0;
const react_query_1 = require("@tanstack/react-query");
/**
 * Hook to invoke a smart contract method.
 *
 * @remarks
 *
 * This hook calls the `Contract.invoke` method under the hood.
 * Arguments should be encoded according to the starknet.js version
 * you're using.
 *
 * @deprecated Use {@link useStarknetExecute} instead.
 *
 * @example
 * This example shows how to transfer some ETH.
 * ```tsx
 * function Component() {
 *   const { address } = useAccount()
 *   const { contract } = useContract({
 *     abi: compiledErc20.abi,
 *     address: ethAddress,
 *   })
 *   const { invoke } = useStarknetInvoke({
 *     contract,
 *     method: 'transfer',
 *   })
 *
 *   return (
 *     <button onClick={() => invoke({ args: [address, [1, 0]] })}>
 *       Invoke
 *     </button>
 *   )
 * }
 * ```
 */
function useStarknetInvoke({ contract, method, }) {
    const { data, isLoading, error, reset, mutateAsync } = (0, react_query_1.useMutation)(writeContract({ contract, method }));
    return {
        data,
        loading: isLoading,
        error: error ?? undefined,
        reset,
        invoke: mutateAsync,
    };
}
exports.useStarknetInvoke = useStarknetInvoke;
function writeContract({ contract, method, }) {
    return async ({ args, metadata, overrides }) => {
        if (contract === undefined) {
            throw new Error('No contract specified');
        }
        if (method === undefined) {
            throw new Error('No method specified');
        }
        const response = await contract.invoke(method, args, overrides);
        console.warn(`TODO: ignoring metadata`, metadata);
        return response;
    };
}
//# sourceMappingURL=invoke.js.map