"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSignTypedData = void 0;
const react_1 = require("react");
const providers_1 = require("../providers");
function starknetSignReducer(state, action) {
    if (action.type === 'start_signing') {
        return {
            ...state,
            loading: true,
        };
    }
    else if (action.type === 'set_signature') {
        return {
            ...state,
            data: action.data,
            loading: false,
        };
    }
    else if (action.type === 'set_error') {
        return {
            ...state,
            error: action.error,
            loading: false,
        };
    }
    else if (action.type === 'reset') {
        return {
            ...state,
            data: undefined,
            error: undefined,
            loading: false,
        };
    }
    return state;
}
/**
 * Hook to sign typed data.
 *
 * @remarks
 *
 * This hook signs a JSON object for off-chain use with the current
 * wallet private key.
 *
 * @example
 * This example shows how to sign some data.
 * ```tsx
 * function Component() {
 *   const { data, signTypedData } = useSignTypedData(message)
 *   const message = {
 *     types: {
 *       Person: [
 *         { name: 'name', type: 'felt' }
 *       ],
 *       Mail: [
 *         { name: 'from', type: 'Person' }
 *       ]
 *     },
 *     primaryType: 'Mail',
 *     domain: {
 *       name: 'StarkNet Mail',
 *       version: '1',
 *       chainId: 1,
 *     },
 *     message: {
 *       from: {
 *         name: 'Alice'
 *       }
 *     }
 *   }
 *
 *   return (
 *     <>
 *       <p>
 *         <button onClick={signTypedData}>Sign</button>
 *       </p>
 *       {data && <p>Signed: {JSON.stringify(data)}</p>}
 *     </>
 *   )
 * }
 * ```
 */
function useSignTypedData(typedData) {
    const [state, dispatch] = (0, react_1.useReducer)(starknetSignReducer, {
        loading: false,
    });
    const { account: accountAddress, connectors } = (0, providers_1.useStarknet)();
    const reset = (0, react_1.useCallback)(() => {
        dispatch({ type: 'reset' });
    }, [dispatch]);
    const { data, error, loading } = state;
    const signTypedData = (0, react_1.useCallback)(async () => {
        dispatch({ type: 'reset' });
        dispatch({ type: 'start_signing' });
        try {
            let accountInterface = null;
            const availableConnectors = connectors.filter((conn) => conn.available());
            for (const connector of availableConnectors) {
                const account = await connector.account();
                if (account && account.address === accountAddress) {
                    accountInterface = account;
                    break;
                }
            }
            if (!accountInterface) {
                throw new Error(`No connector for address ${accountAddress}`);
            }
            const response = await accountInterface.signMessage(typedData);
            dispatch({ type: 'set_signature', data: response });
            return response;
        }
        catch (err) {
            const errorMessage = err instanceof Error ? err.message : String(err);
            dispatch({ type: 'set_error', error: errorMessage });
            console.error(err);
        }
    }, [accountAddress, connectors, typedData]);
    return {
        data,
        error,
        loading,
        signTypedData,
        reset,
    };
}
exports.useSignTypedData = useSignTypedData;
//# sourceMappingURL=sign.js.map