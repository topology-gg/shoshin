"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDeploy = void 0;
const react_query_1 = require("@tanstack/react-query");
/**
 * Hook to deploy a StarkNet contract.
 *
 * @remarks
 *
 * You should check that `contractFactory` is defined before calling `deploy`,
 * or the call will fail.
 *
 * The transaction is submitted from the provider passed to the contract factory,
 * so ensure to use the currently connected account.
 *
 * @example
 * This example shows how to deploy a contract from the currently connected account.
 * ```tsx
 * function Component() {
 *   const { account, address } = useAccount()
 *   const { contractFactory } = useContractFactory({
 *     compiledContract: compiledErc20,
 *     providerOrAccount: account
 *   })
 *
 *   // notice constructor args are felt encoded
 *   const constructorCalldata = useMemo(() => [
 *     encodeShortString('StarkNet React'), // name
 *     encodeShortString('SNR'), // symbol
 *     18, // decimals
 *     10000, // initial_supply.low
 *     0, // initial_supply.high
 *     address, // recipient
 *     address, // owner
 *   ], [address])
 *
 *   const { deploy, error } = useDeploy({
 *     contractFactory,
 *     constructorCalldata
 *   })
 *
 *   return (
 *     <>
 *       <button onClick={deploy}>Deploy contract</button>
 *       {error && <p>Error: {JSON.stringify(error)}</p>}
 *     </>
 *   )
 * }
 * ```
 */
function useDeploy({ contractFactory, constructorCalldata, addressSalt, }) {
    const { data, isLoading, error, reset, mutateAsync } = (0, react_query_1.useMutation)(deployContract({ contractFactory, constructorCalldata, addressSalt }));
    return {
        data,
        loading: isLoading,
        error: error ?? undefined,
        reset,
        deploy: mutateAsync,
    };
}
exports.useDeploy = useDeploy;
function deployContract({ contractFactory, constructorCalldata, addressSalt }) {
    return async () => {
        if (contractFactory === undefined) {
            throw new Error('No contract factory defined');
        }
        return await contractFactory.deploy(constructorCalldata, addressSalt);
    };
}
//# sourceMappingURL=deploy.js.map