import { AccountInterface, ProviderInterface } from 'starknet';
import { Connector } from './base';
/** Injected connector options. */
export interface InjectedConnectorOptions {
    /** The wallet id. */
    id: string;
}
/** Wallet event type. */
export declare type EventType = 'accountsChanged' | 'networkChanged';
/** Wallet event handler. */
export declare type EventHandler = (data: any) => void;
/** Interface implemented by all injected starknet wallets. */
export interface IStarknetWindowObject {
    enable: (options?: {
        showModal?: boolean;
    }) => Promise<string[]>;
    isPreauthorized: () => Promise<boolean>;
    on: (event: EventType, handleEvent: EventHandler) => void;
    off: (event: EventType, handleEvent: EventHandler) => void;
    id: string;
    name: string;
    version: string;
    icon: string;
    provider: ProviderInterface;
    isConnected: boolean;
    account: AccountInterface;
    selectedAddress?: string;
}
export declare class InjectedConnector extends Connector<InjectedConnectorOptions> {
    private _wallet?;
    constructor({ options }: {
        options: InjectedConnectorOptions;
    });
    available(): boolean;
    ready(): Promise<boolean>;
    connect(): Promise<AccountInterface>;
    disconnect(): Promise<void>;
    account(): Promise<AccountInterface | null>;
    id(): string;
    name(): string;
    private ensureWallet;
}
/**
 * Returns all injected connectors installed by the user.
 *
 * @remarks
 *
 * Because of how wallets are injected in the window context, this
 * function is not guaranteed to return the actual installed wallets.
 *
 * @deprecated
 *
 * Don't use this function for new applications, manually specify the supported
 * wallets instead.
 */
export declare function getInstalledInjectedConnectors(): InjectedConnector[];
export declare const isWalletObj: (key: string, wallet: any) => boolean;
