import { ContractInterface } from 'starknet';
import { BlockIdentifier } from 'starknet/dist/provider/utils';
/** Call options. */
export interface UseStarknetCallOptions {
    /** Refresh data at every block. */
    watch?: boolean;
    /** Block identifier used when performing call. */
    blockIdentifier?: BlockIdentifier;
}
/** Arguments for `useStarknetCall`. */
export interface UseStarknetCallProps<T extends unknown[]> {
    /** The target contract. */
    contract?: ContractInterface;
    /** The contract's method. */
    method?: string;
    /** Call arguments. */
    args?: T;
    /** Call options. */
    options?: UseStarknetCallOptions;
}
/** Value returned from `useStarknetCall`. */
export interface UseStarknetCallResult {
    /** Value returned from call. */
    data?: Array<any>;
    /** True when performing call. */
    loading: boolean;
    /** Error when performing call. */
    error?: string;
    /** Manually trigger refresh of data. */
    refresh: () => void;
}
/**
 * Hook to perform a read-only contract call.
 *
 * @remarks
 *
 * The hook only performs a call if the target `contract`,
 * `method`, and `args` are not undefined.
 *
 * @example
 * This example shows how to fetch the user ERC-20 balance.
 * ```tsx
 * function Component() {
 *   const { contract } = useContract({
 *     address: ethAddress,
 *     abi: compiledErc20.abi
 *   })
 *   const { address } = useAccount()
 *   const { data, loading, error, refresh } = useStarknetCall({
 *     contract,
 *     method: 'balanceOf',
 *     args: [address],
 *     options: {
 *       watch: false
 *     }
 *   })
 *
 *   if (loading) return <span>Loading...</span>
 *   if (error) return <span>Error: {error}</span>
 *
 *   return (
 *     <div>
 *       <button onClick={refresh}>Refresh</button>
 *       <p>Balance: {JSON.stringify(data)}</p>
 *     </div>
 *   )
 * }
 * ```
 */
export declare function useStarknetCall<T extends unknown[]>({ contract, method, args, options, }: UseStarknetCallProps<T>): UseStarknetCallResult;
